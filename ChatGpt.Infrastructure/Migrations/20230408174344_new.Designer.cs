// <auto-generated />
using System;
using ChatGpt.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChatGpt.Infrastructure.Migrations
{
    [DbContext(typeof(GptDbContext))]
    [Migration("20230408174344_new")]
    partial class @new
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ChatGpt.Domain.Entities.Chats.ChatGpt.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AiChatId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("DeleteCreatorId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsBot")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifierId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("chatmessage", (string)null);
                });

            modelBuilder.Entity("ChatGpt.Domain.Entities.Users.ChatGpt.ChatGptSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ApiKey")
                        .HasColumnType("longtext");

                    b.Property<string>("Avatar")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifierId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("chatgptsetting", (string)null);
                });

            modelBuilder.Entity("ChatGpt.Domain.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Avatar")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("DeleteCreatorId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MaxUseCountDaily")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifierId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SurplusUserCountDaily")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("user_pk_id");

                    b.HasIndex("UserName")
                        .HasDatabaseName("user_idx_username");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("ChatGpt.Domain.Entities.Users.ChatGpt.ChatGptSetting", b =>
                {
                    b.HasOne("ChatGpt.Domain.Entities.Users.User", "User")
                        .WithOne("ChatGptSetting")
                        .HasForeignKey("ChatGpt.Domain.Entities.Users.ChatGpt.ChatGptSetting", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ChatGpt.Domain.Entities.Users.ChatGpt.Chat", "Chat", b1 =>
                        {
                            b1.Property<Guid>("ChatGptSettingId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("ApiAddress")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<int>("ContextCount")
                                .HasColumnType("int");

                            b1.Property<bool>("EnableContext")
                                .HasColumnType("tinyint(1)");

                            b1.Property<int>("MaxToken")
                                .HasColumnType("int");

                            b1.Property<string>("SystemCospaly")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<decimal>("Temperature")
                                .HasMaxLength(2)
                                .HasColumnType("decimal(65,30)");

                            b1.HasKey("ChatGptSettingId");

                            b1.ToTable("chatgptsetting");

                            b1.WithOwner()
                                .HasForeignKey("ChatGptSettingId");
                        });

                    b.OwnsOne("ChatGpt.Domain.Entities.Users.ChatGpt.Image", "Image", b1 =>
                        {
                            b1.Property<Guid>("ChatGptSettingId")
                                .HasColumnType("char(36)");

                            b1.Property<int>("Num")
                                .HasColumnType("int");

                            b1.Property<string>("Size")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("ChatGptSettingId");

                            b1.ToTable("chatgptsetting");

                            b1.WithOwner()
                                .HasForeignKey("ChatGptSettingId");
                        });

                    b.Navigation("Chat")
                        .IsRequired();

                    b.Navigation("Image")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ChatGpt.Domain.Entities.Users.User", b =>
                {
                    b.Navigation("ChatGptSetting")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
